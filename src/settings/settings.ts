const namespace = 'nimble';

const scope = {
	client: 'client',
	user: 'user',
	world: 'world',
};

export const settings = [
	// Optional Rule Toggles - Variant Rules
	{
		namespace,
		key: 'multiclassing',
		options: {
			name: 'NIMBLE.settings.multiclassing.name',
			hint: 'NIMBLE.settings.multiclassing.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'largeGroups',
		options: {
			name: 'NIMBLE.settings.largeGroups.name',
			hint: 'NIMBLE.settings.largeGroups.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'fastResting',
		options: {
			name: 'NIMBLE.settings.fastResting.name',
			hint: 'NIMBLE.settings.fastResting.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'criticalHealing',
		options: {
			name: 'NIMBLE.settings.criticalHealing.name',
			hint: 'NIMBLE.settings.criticalHealing.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'thrownPotions',
		options: {
			name: 'NIMBLE.settings.thrownPotions.name',
			hint: 'NIMBLE.settings.thrownPotions.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'suckerPunch',
		options: {
			name: 'NIMBLE.settings.suckerPunch.name',
			hint: 'NIMBLE.settings.suckerPunch.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'inspiration',
		options: {
			name: 'NIMBLE.settings.inspiration.name',
			hint: 'NIMBLE.settings.inspiration.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'keyStatSwap',
		options: {
			name: 'NIMBLE.settings.keyStatSwap.name',
			hint: 'NIMBLE.settings.keyStatSwap.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'complexCharacters',
		options: {
			name: 'NIMBLE.settings.complexCharacters.name',
			hint: 'NIMBLE.settings.complexCharacters.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'customWeaponDice',
		options: {
			name: 'NIMBLE.settings.customWeaponDice.name',
			hint: 'NIMBLE.settings.customWeaponDice.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'measurementSystem',
		options: {
			name: 'NIMBLE.settings.measurementSystem.name',
			hint: 'NIMBLE.settings.measurementSystem.hint',
			scope: scope.world,
			config: false,
			default: 'grid',
			type: String,
			choices: {
				grid: 'NIMBLE.settings.measurementSystem.choices.grid',
				metric: 'NIMBLE.settings.measurementSystem.choices.metric',
				abstract: 'NIMBLE.settings.measurementSystem.choices.abstract',
			},
		},
	},
	{
		namespace,
		key: 'grittyDying',
		options: {
			name: 'NIMBLE.settings.grittyDying.name',
			hint: 'NIMBLE.settings.grittyDying.hint',
			scope: scope.world,
			config: false,
			default: 'off',
			type: String,
			choices: {
				off: 'NIMBLE.settings.grittyDying.choices.off',
				cap5: 'NIMBLE.settings.grittyDying.choices.cap5',
				cap4: 'NIMBLE.settings.grittyDying.choices.cap4',
				cap3: 'NIMBLE.settings.grittyDying.choices.cap3',
				cap2: 'NIMBLE.settings.grittyDying.choices.cap2',
				cap1: 'NIMBLE.settings.grittyDying.choices.cap1',
			},
		},
	},
	{
		namespace,
		key: 'grittyDyingPenalty',
		options: {
			name: 'NIMBLE.settings.grittyDyingPenalty.name',
			hint: 'NIMBLE.settings.grittyDyingPenalty.hint',
			scope: scope.world,
			config: false,
			default: 'off',
			type: String,
			choices: {
				off: 'NIMBLE.settings.grittyDyingPenalty.choices.off',
				skillChecks: 'NIMBLE.settings.grittyDyingPenalty.choices.skillChecks',
				saves: 'NIMBLE.settings.grittyDyingPenalty.choices.saves',
				allRolls: 'NIMBLE.settings.grittyDyingPenalty.choices.allRolls',
			},
		},
	},
	// UI and GM Quality-of-Life Settings
	{
		namespace,
		key: 'conditionHUD',
		options: {
			name: 'NIMBLE.settings.conditionHUD.name',
			hint: 'NIMBLE.settings.conditionHUD.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'reactionPrompts',
		options: {
			name: 'NIMBLE.settings.reactionPrompts.name',
			hint: 'NIMBLE.settings.reactionPrompts.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'assessHelper',
		options: {
			name: 'NIMBLE.settings.assessHelper.name',
			hint: 'NIMBLE.settings.assessHelper.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'displayConditionsIcons',
		options: {
			name: 'NIMBLE.settings.displayConditionsIcons.name',
			hint: 'NIMBLE.settings.displayConditionsIcons.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'showSkillTooltips',
		options: {
			name: 'NIMBLE.settings.showSkillTooltips.name',
			hint: 'NIMBLE.settings.showSkillTooltips.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'showBoons',
		options: {
			name: 'NIMBLE.settings.showBoons.name',
			hint: 'NIMBLE.settings.showBoons.hint',
			scope: scope.world,
			config: false,
			default: true,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'debugLogs',
		options: {
			name: 'NIMBLE.settings.debugLogs.name',
			hint: 'NIMBLE.settings.debugLogs.hint',
			scope: scope.world,
			config: false,
			default: false,
			type: Boolean,
		},
	},
	{
		namespace,
		key: 'languageSet',
		options: {
			name: 'NIMBLE.settings.languageSet.name',
			hint: 'NIMBLE.settings.languageSet.hint',
			scope: scope.world,
			config: false,
			default: {
				defaults: {
					Common: { enabled: true, alias: '' },
					Dwarvish: { enabled: true, alias: '' },
					Elvish: { enabled: true, alias: '' },
					Goblin: { enabled: true, alias: '' },
					Infernal: { enabled: true, alias: '' },
					Celestial: { enabled: true, alias: '' },
					Draconic: { enabled: true, alias: '' },
					Primordial: { enabled: true, alias: '' },
					'Deep Speak': { enabled: true, alias: '' },
					"Thieves' Cant": { enabled: true, alias: '' },
				},
				custom: [],
			},
			type: Object,
		},
	},
];
